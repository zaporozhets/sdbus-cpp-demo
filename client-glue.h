
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__client_glue_h__proxy__H__
#define __sdbuscpp__client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace yo {

class Example_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.yo.Example";

protected:
    Example_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Example_proxy() = default;

public:
    void UpdateA(const std::string& value)
    {
        proxy_.callMethod("UpdateA").onInterface(INTERFACE_NAME).withArguments(value);
    }

public:
    std::string A()
    {
        return proxy_.getProperty("A").onInterface(INTERFACE_NAME);
    }

    std::string B()
    {
        return proxy_.getProperty("B").onInterface(INTERFACE_NAME);
    }

    std::string C()
    {
        return proxy_.getProperty("C").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
