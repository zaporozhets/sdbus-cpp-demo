
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__service_glue_h__adaptor__H__
#define __sdbuscpp__service_glue_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace yo {

class Example_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.yo.Example";

protected:
    Example_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("UpdateA").onInterface(INTERFACE_NAME).withInputParamNames("value").implementedAs([this](const std::string& value){ return this->UpdateA(value); });
        object_.registerProperty("A").onInterface(INTERFACE_NAME).withGetter([this](){ return this->A(); });
        object_.registerProperty("B").onInterface(INTERFACE_NAME).withGetter([this](){ return this->B(); });
        object_.registerProperty("C").onInterface(INTERFACE_NAME).withGetter([this](){ return this->C(); });
    }

    ~Example_adaptor() = default;

private:
    virtual void UpdateA(const std::string& value) = 0;

private:
    virtual std::string A() = 0;
    virtual std::string B() = 0;
    virtual std::string C() = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
